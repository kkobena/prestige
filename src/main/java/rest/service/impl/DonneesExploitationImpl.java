/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rest.service.impl;

import commonTasks.dto.DonneesExploitationDTO;
import dal.TUser;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TemporalType;
import javax.persistence.Tuple;
import org.apache.commons.lang3.StringUtils;
import org.json.JSONArray;
import org.json.JSONObject;
import rest.service.DonneesExploitation;
import util.DateConverter;

/**
 *
 * @author koben
 */
@Stateless
public class DonneesExploitationImpl implements DonneesExploitation {

    private static final Logger LOG = Logger.getLogger(DonneesExploitationImpl.class.getName());

    @PersistenceContext(unitName = "JTA_UNIT")
    private EntityManager em;

    public EntityManager getEntityManager() {
        return em;
    }

    @Override
    public DonneesExploitationDTO donneesCompteExploitation(TUser user, String dtStart, String dtEnd) {
        DonneesExploitationDTO donneesExploitation = new DonneesExploitationDTO();
        DonneesExploitationDTO chiffreAffaireEspeceSansVeto = chiffreAffaireEspeceSansVeto(user, dtStart, dtEnd);
        long montantEspSansVeto = chiffreAffaireEspeceSansVeto.getEspece();
        DonneesExploitationDTO chiffreAffaireEspeceVeto = chiffreAffaireEspeceVeto(user, dtStart, dtEnd);
        long montantEspVeto = chiffreAffaireEspeceVeto.getEspece();
        DonneesExploitationDTO chiffreAffaireCreditVeto = chiffreAffaireCreditVeto(user, dtStart, dtEnd);
        long montantCreditVeto = chiffreAffaireCreditVeto.getCredit();
        DonneesExploitationDTO chiffreAffaireCreditSansVeto = chiffreAffaireCreditSansVeto(user, dtStart, dtEnd);
        DonneesExploitationDTO chiffreAffaireGlobalHT = chiffreAffaireGlobalHT(user, dtStart, dtEnd);
        long montantCreditSansVeto = chiffreAffaireCreditSansVeto.getCredit();
        donneesExploitation.setEspece(montantEspSansVeto);
        donneesExploitation.setEspeceVeto(montantEspVeto);
        donneesExploitation.setCredit(montantCreditSansVeto);
        donneesExploitation.setCreditVeto(montantCreditVeto);
        donneesExploitation.setTotalCaTTC(chiffreAffaireGlobalHT.getTotalCaTTC());
        donneesExploitation.setTotalTVA(chiffreAffaireGlobalHT.getTotalTVA());
        donneesExploitation.setTotalRemise(chiffreAffaireGlobalHT.getTotalRemise());
        donneesExploitation.setTotalCaHT(donneesExploitation.getTotalCaTTC() - donneesExploitation.getTotalTVA());
        return donneesExploitation;
    }

    @Override
    public JSONObject donneesCompteExploitation(String dtStart, String dtEnd, TUser user) {
        throw new UnsupportedOperationException("Not supported yet."); // To change body of generated methods, choose
                                                                       // Tools | Templates.
    }

    private DonneesExploitationDTO chiffreAffaireEspeceSansVeto(TUser user, String dtStart, String dtEnd) {
        try {
            List<Tuple> list = getEntityManager()
                    .createNativeQuery("SELECT COALESCE(SUM(m.montantRegle),0) AS MONTANT_ESPECE ,"
                            + " COALESCE(SUM(m.montantPaye),0) AS MONTANT_ESPECE_ARRONDI, COALESCE(SUM(m.montant),0) AS MONTANTTTC, COALESCE(SUM(m.montantNet),0) AS MONTANT_NET "
                            + " FROM mvttransaction m WHERE DATE(m.mvtdate) BETWEEN ?1 AND ?2 AND m.typeReglementId = ?3"
                            + " AND m.checked=TRUE AND ( m.typeTransaction=0 OR m.typeTransaction=1) AND m.lg_EMPLACEMENT_ID=?4 AND m.pkey"
                            + " IN (SELECT d.lg_PREENREGISTREMENT_ID FROM t_preenregistrement_detail d ,t_famille f,t_preenregistrement p WHERE d.lg_PREENREGISTREMENT_ID=p.lg_PREENREGISTREMENT_ID AND d.lg_FAMILLE_ID=f.lg_FAMILLE_ID AND f.lg_FAMILLEARTICLE_ID <> ?5"
                            + " AND DATE(p.dt_UPDATED) BETWEEN ?1 AND ?2 AND p.lg_TYPE_VENTE_ID <>?6 AND p.str_STATUT='is_Closed' AND p.b_IS_CANCEL=0 AND p.int_PRICE >0)",
                            Tuple.class)
                    .setParameter(5, DateConverter.VETERINAIRE).setParameter(3, DateConverter.MODE_ESP)
                    .setParameter(4, user.getLgEMPLACEMENTID().getLgEMPLACEMENTID())
                    .setParameter(1, java.sql.Date.valueOf(dtStart), TemporalType.DATE)
                    .setParameter(2, java.sql.Date.valueOf(dtEnd), TemporalType.DATE)
                    .setParameter(6, DateConverter.DEPOT_EXTENSION).getResultList();
            Tuple t = list.get(0);
            return new DonneesExploitationDTO(t.get(0, BigDecimal.class), t.get(1, BigDecimal.class),
                    t.get(2, BigDecimal.class), t.get(3, BigDecimal.class));// a poursuivre
        } catch (Exception e) {
            LOG.log(Level.SEVERE, "chiffreAffaireEspeceSansVeto===>> ", e);
            return new DonneesExploitationDTO();
        }
    }

    private DonneesExploitationDTO chiffreAffaireEspeceVeto(TUser user, String dtStart, String dtEnd) {
        try {
            List<Tuple> list = getEntityManager()
                    .createNativeQuery("SELECT COALESCE(SUM(m.montantRegle),0) AS MONTANT_ESPECE "
                            + " ,COALESCE(SUM(m.montantPaye),0) AS MONTANT_ESPECE_ARRONDI,COALESCE(SUM(m.montant),0) AS MONTANTTTC,COALESCE(SUM(m.montantNet),0) AS MONTANT_NET "
                            + " FROM mvttransaction m WHERE DATE(m.mvtdate) BETWEEN ?1 AND ?2 AND m.typeReglementId = ?3 "
                            + " AND m.checked=TRUE AND ( m.typeTransaction=0 OR m.typeTransaction=1) AND m.lg_EMPLACEMENT_ID=?4 AND m.pkey"
                            + "  IN (SELECT d.lg_PREENREGISTREMENT_ID FROM t_preenregistrement_detail d ,t_famille f,t_preenregistrement p WHERE d.lg_PREENREGISTREMENT_ID=p.lg_PREENREGISTREMENT_ID AND d.lg_FAMILLE_ID=f.lg_FAMILLE_ID AND f.lg_FAMILLEARTICLE_ID = ?5"
                            + " AND DATE(p.dt_UPDATED) BETWEEN ?1 AND ?2 AND p.lg_TYPE_VENTE_ID <>?6 AND p.str_STATUT='is_Closed' AND p.b_IS_CANCEL=0 AND p.int_PRICE >0 )",
                            Tuple.class)
                    .setParameter(5, DateConverter.VETERINAIRE).setParameter(3, DateConverter.MODE_ESP)
                    .setParameter(4, user.getLgEMPLACEMENTID().getLgEMPLACEMENTID())
                    .setParameter(1, java.sql.Date.valueOf(dtStart), TemporalType.DATE)
                    .setParameter(2, java.sql.Date.valueOf(dtEnd), TemporalType.DATE)
                    .setParameter(6, DateConverter.DEPOT_EXTENSION).getResultList();
            Tuple t = list.get(0);
            return new DonneesExploitationDTO(t.get(0, BigDecimal.class), t.get(1, BigDecimal.class),
                    t.get(2, BigDecimal.class), t.get(3, BigDecimal.class));// a poursuivre
        } catch (Exception e) {
            LOG.log(Level.SEVERE, "chiffreAffaireEspeceVeto===>> ", e);
            return new DonneesExploitationDTO();
        }
    }

    private DonneesExploitationDTO chiffreAffaireCreditVeto(TUser user, String dtStart, String dtEnd) {
        try {
            List<Tuple> list = getEntityManager()
                    .createNativeQuery("SELECT COALESCE(SUM(m.montantCredit),0) AS MONTANTTTC "
                            + " FROM mvttransaction m WHERE DATE(m.mvtdate) BETWEEN ?1 AND ?2 "
                            + " AND m.checked=TRUE AND m.typeTransaction=1 AND m.lg_EMPLACEMENT_ID=?3 AND m.pkey"
                            + "  IN (SELECT d.lg_PREENREGISTREMENT_ID FROM t_preenregistrement_detail d ,t_famille f,t_preenregistrement p WHERE d.lg_PREENREGISTREMENT_ID=p.lg_PREENREGISTREMENT_ID AND d.lg_FAMILLE_ID=f.lg_FAMILLE_ID AND f.lg_FAMILLEARTICLE_ID = ?4"
                            + " AND DATE(p.dt_UPDATED) BETWEEN ?1 AND ?2 AND p.lg_TYPE_VENTE_ID <>?5 AND p.str_STATUT='is_Closed' AND p.b_IS_CANCEL=0 AND p.int_PRICE >0 )",
                            Tuple.class)
                    .setParameter(4, DateConverter.VETERINAIRE)
                    .setParameter(3, user.getLgEMPLACEMENTID().getLgEMPLACEMENTID())
                    .setParameter(1, java.sql.Date.valueOf(dtStart), TemporalType.DATE)
                    .setParameter(2, java.sql.Date.valueOf(dtEnd), TemporalType.DATE)
                    .setParameter(5, DateConverter.DEPOT_EXTENSION).getResultList();
            Tuple t = list.get(0);
            return new DonneesExploitationDTO(t.get(0, BigDecimal.class));

        } catch (Exception e) {
            LOG.log(Level.SEVERE, "chiffreAffaireCreditVeto===>> ", e);
            return new DonneesExploitationDTO();
        }
    }

    private DonneesExploitationDTO chiffreAffaireCreditSansVeto(TUser user, String dtStart, String dtEnd) {
        try {
            List<Tuple> list = getEntityManager()
                    .createNativeQuery("SELECT COALESCE(SUM(m.montantCredit),0) AS MONTANTTTC "
                            + " FROM mvttransaction m WHERE DATE(m.mvtdate) BETWEEN ?1 AND ?2"
                            + " AND m.checked=TRUE AND m.typeTransaction=1 AND m.lg_EMPLACEMENT_ID=?3 AND m.pkey"
                            + "  IN (SELECT d.lg_PREENREGISTREMENT_ID FROM t_preenregistrement_detail d ,t_famille f,t_preenregistrement p WHERE d.lg_PREENREGISTREMENT_ID=p.lg_PREENREGISTREMENT_ID AND d.lg_FAMILLE_ID=f.lg_FAMILLE_ID AND f.lg_FAMILLEARTICLE_ID <> ?4"
                            + " AND DATE(p.dt_UPDATED) BETWEEN ?1 AND ?2 AND p.lg_TYPE_VENTE_ID <>?5 AND p.str_STATUT='is_Closed' AND p.b_IS_CANCEL=0 AND p.int_PRICE >0 )",
                            Tuple.class)
                    .setParameter(4, DateConverter.VETERINAIRE)
                    .setParameter(3, user.getLgEMPLACEMENTID().getLgEMPLACEMENTID())
                    .setParameter(1, java.sql.Date.valueOf(dtStart), TemporalType.DATE)
                    .setParameter(2, java.sql.Date.valueOf(dtEnd), TemporalType.DATE)
                    .setParameter(5, DateConverter.DEPOT_EXTENSION).getResultList();
            Tuple t = list.get(0);
            return new DonneesExploitationDTO(t.get(0, BigDecimal.class));
        } catch (Exception e) {
            LOG.log(Level.SEVERE, "chiffreAffaireCreditSansVeto===>> ", e);
            return new DonneesExploitationDTO();
        }
    }

    private DonneesExploitationDTO venteMontantTTCAndMontantAchatCreditSansVeto(TUser user, String dtStart,
            String dtEnd) {
        try {
            List<Tuple> list = getEntityManager().createNativeQuery(
                    "SELECT COALESCE(SUM(d.int_PRICE),0) AS montantTTC,COALESCE(SUM(d.prixAchat*d.int_QUANTITY),0) AS montantAchat FROM t_preenregistrement_detail d ,t_preenregistrement p,t_famille f,t_user u"
                            + " WHERE p.str_STATUT='is_Closed' AND d.lg_PREENREGISTREMENT_ID=p.lg_PREENREGISTREMENT_ID AND p.b_IS_CANCEL=0 AND p.int_PRICE>0 AND d.lg_FAMILLE_ID=f.lg_FAMILLE_ID AND  f.lg_FAMILLEARTICLE_ID <> ?1 AND p.lg_USER_ID=u.lg_USER_ID AND u.lg_EMPLACEMENT_ID=?2 AND DATE(p.dt_UPDATED) BETWEEN ?3 AND ?4 "
                            + " AND p.lg_TYPE_VENTE_ID <> ?5  AND p.lg_PREENREGISTREMENT_ID  IN (SELECT m.pkey FROM mvttransaction m WHERE DATE(m.mvtdate) BETWEEN ?3 AND ?4 AND m.typeReglementId=?6 AND m.typeTransaction=1)",
                    Tuple.class).setParameter(1, DateConverter.VETERINAIRE)
                    .setParameter(2, user.getLgEMPLACEMENTID().getLgEMPLACEMENTID())
                    .setParameter(3, java.sql.Date.valueOf(dtStart), TemporalType.DATE)
                    .setParameter(4, java.sql.Date.valueOf(dtEnd), TemporalType.DATE)
                    .setParameter(5, DateConverter.DEPOT_EXTENSION).setParameter(6, DateConverter.MODE_ESP)
                    .getResultList();
            Tuple t = list.get(0);
            return new DonneesExploitationDTO(t.get(0, BigDecimal.class), t.get(1, BigDecimal.class));
        } catch (Exception e) {
            LOG.log(Level.SEVERE, "venteMontantTTCAndMontantAchatSansVeto===>> ", e);

            return new DonneesExploitationDTO();
        }
    }

    @Override
    public JSONObject donneesCompteExploitation(TUser user, String dtStart, String dtEnd, String codeFrom,
            String codeTo) {
        List<DonneesExploitationDTO> exploitations = donneesCompteExploitation(dtStart, dtEnd, codeFrom, codeTo, user);
        return new JSONObject().put("data", new JSONArray(exploitations)).put("total", exploitations.size());
    }

    @Override
    public List<DonneesExploitationDTO> donneesCompteExploitation(String dtStart, String dtEnd, String codeFrom,
            String codeTo, TUser user) {
        List<DonneesExploitationDTO> exploitations = new ArrayList<>();
        List<DonneesExploitationDTO> vetoCredit = chiffreAffaireCreditVetoGroup(user, dtStart, dtEnd);
        List<DonneesExploitationDTO> especeVeto = chiffreAffaireEspeceVetoGroup(user, dtStart, dtEnd);
        Stream<DonneesExploitationDTO> datas = Stream.of(vetoCredit, especeVeto).flatMap(Collection::stream);
        List<DonneesExploitationDTO> datas2 = datas.collect(Collectors.toList());
        List<String> idsClient = datas2.stream().flatMap(e -> Stream.of(e.getGroupeTiersPayantCode()))
                .collect(Collectors.toList());
        List<DonneesExploitationDTO> payants = tTiersPayants(codeFrom, codeTo, idsClient);
        payants.forEach(payant -> {
            List<DonneesExploitationDTO> l = datas2.stream()
                    .filter(e -> e.getGroupeTiersPayantCode().equals(payant.getClientId()))
                    .collect(Collectors.toList());
            if (!l.isEmpty()) {
                DonneesExploitationDTO o = new DonneesExploitationDTO();
                o.setGroupeTiersPayant(payant.getGroupeTiersPayant());
                o.setGroupeTiersPayantCode(payant.getGroupeTiersPayantCode());
                o.setGroupeTiersPayantLibelle(payant.getGroupeTiersPayantLibelle());
                l.stream().map(donneesExploitationDTO -> {
                    o.setCreditVeto(o.getCreditVeto() + donneesExploitationDTO.getCredit());
                    return donneesExploitationDTO;
                }).forEachOrdered(donneesExploitationDTO -> {
                    o.setEspeceVeto(o.getEspeceVeto() + donneesExploitationDTO.getEspece());
                });
                exploitations.add(o);
            }
        });
        exploitations.sort(Comparator.comparing(DonneesExploitationDTO::getGroupeTiersPayantLibelle));
        return exploitations;
    }

    List<DonneesExploitationDTO> tTiersPayants(String codeFrom, String codeTo, List<String> idsClient) {
        try {
            List<Tuple> list;
            if (StringUtils.isEmpty(codeFrom) && !StringUtils.isEmpty(codeTo)) {
                list = getEntityManager().createNativeQuery(
                        "SELECT p.lg_TIERS_PAYANT_ID,p.str_CODE_ORGANISME,p.str_FULLNAME,c.lg_CLIENT_ID FROM t_compte_client_tiers_payant cp,t_compte_client c, t_tiers_payant p "
                                + " WHERE cp.lg_COMPTE_CLIENT_ID=c.lg_COMPTE_CLIENT_ID AND cp.lg_TIERS_PAYANT_ID=p.lg_TIERS_PAYANT_ID AND c.lg_CLIENT_ID IN ?1 AND p.str_CODE_ORGANISME <=?2",
                        Tuple.class).setParameter(1, idsClient).setParameter(2, codeTo).getResultList();
            } else if (StringUtils.isEmpty(codeTo) && !StringUtils.isEmpty(codeFrom)) {
                list = getEntityManager().createNativeQuery(
                        "SELECT p.lg_TIERS_PAYANT_ID,p.str_CODE_ORGANISME,p.str_FULLNAME,c.lg_CLIENT_ID FROM t_compte_client_tiers_payant cp,t_compte_client c, t_tiers_payant p "
                                + " WHERE cp.lg_COMPTE_CLIENT_ID=c.lg_COMPTE_CLIENT_ID AND cp.lg_TIERS_PAYANT_ID=p.lg_TIERS_PAYANT_ID AND c.lg_CLIENT_ID IN ?1 AND p.str_CODE_ORGANISME >=?2",
                        Tuple.class).setParameter(1, idsClient).setParameter(2, codeFrom).getResultList();
            } else if (!StringUtils.isEmpty(codeFrom) && !StringUtils.isEmpty(codeTo)) {
                list = getEntityManager().createNativeQuery(
                        "SELECT p.lg_TIERS_PAYANT_ID,p.str_CODE_ORGANISME,p.str_FULLNAME,c.lg_CLIENT_ID FROM t_compte_client_tiers_payant cp,t_compte_client c, t_tiers_payant p "
                                + " WHERE cp.lg_COMPTE_CLIENT_ID=c.lg_COMPTE_CLIENT_ID AND cp.lg_TIERS_PAYANT_ID=p.lg_TIERS_PAYANT_ID AND c.lg_CLIENT_ID IN ?1 AND p.str_CODE_ORGANISME BETWEEN ?2 AND ?3",
                        Tuple.class).setParameter(1, idsClient).setParameter(2, codeFrom).setParameter(3, codeTo)
                        .getResultList();
            } else {
                list = getEntityManager().createNativeQuery(
                        "SELECT p.lg_TIERS_PAYANT_ID,p.str_CODE_ORGANISME,p.str_FULLNAME,c.lg_CLIENT_ID FROM t_compte_client_tiers_payant cp,t_compte_client c, t_tiers_payant p "
                                + " WHERE cp.lg_COMPTE_CLIENT_ID=c.lg_COMPTE_CLIENT_ID AND cp.lg_TIERS_PAYANT_ID=p.lg_TIERS_PAYANT_ID AND c.lg_CLIENT_ID IN ?1 ",
                        Tuple.class).setParameter(1, idsClient).getResultList();
            }
            List<DonneesExploitationDTO> exploitations = new ArrayList<>();
            list.forEach(t -> {
                exploitations.add(new DonneesExploitationDTO(t.get(0, String.class), t.get(1, String.class),
                        t.get(2, String.class), t.get(3, String.class)));
            });
            return exploitations;
        } catch (Exception e) {
            return Collections.emptyList();
        }
    }

    private List<DonneesExploitationDTO> chiffreAffaireCreditVetoGroup(TUser user, String dtStart, String dtEnd) {
        try {
            List<Tuple> list = getEntityManager()
                    .createNativeQuery("SELECT COALESCE(SUM(m.montantCredit),0) AS MONTANTTTC ,m.organisme"
                            + " FROM mvttransaction m WHERE DATE(m.mvtdate) BETWEEN ?1 AND ?2 "
                            + " AND m.checked=TRUE AND m.typeTransaction=1 AND m.lg_EMPLACEMENT_ID=?3 AND m.pkey"
                            + "  IN (SELECT d.lg_PREENREGISTREMENT_ID FROM t_preenregistrement_detail d ,t_famille f,t_preenregistrement p WHERE d.lg_PREENREGISTREMENT_ID=p.lg_PREENREGISTREMENT_ID AND d.lg_FAMILLE_ID=f.lg_FAMILLE_ID AND f.lg_FAMILLEARTICLE_ID = ?4"
                            + " AND DATE(p.dt_UPDATED) BETWEEN ?1 AND ?2 AND p.lg_TYPE_VENTE_ID <>?5 AND p.str_STATUT='is_Closed' AND p.b_IS_CANCEL=0 AND p.int_PRICE >0 ) GROUP BY m.organisme",
                            Tuple.class)
                    .setParameter(4, DateConverter.VETERINAIRE)
                    .setParameter(3, user.getLgEMPLACEMENTID().getLgEMPLACEMENTID())
                    .setParameter(1, java.sql.Date.valueOf(dtStart), TemporalType.DATE)
                    .setParameter(2, java.sql.Date.valueOf(dtEnd), TemporalType.DATE)
                    .setParameter(5, DateConverter.DEPOT_EXTENSION).getResultList();
            List<DonneesExploitationDTO> exploitations = new ArrayList<>();
            list.forEach(t -> {
                exploitations.add(new DonneesExploitationDTO(t.get(0, BigDecimal.class), t.get(1, String.class)));
            });
            return exploitations;

        } catch (Exception e) {
            LOG.log(Level.SEVERE, "chiffreAffaireCreditVetoGroup===>> ", e);
            return Collections.emptyList();
        }
    }

    private List<DonneesExploitationDTO> chiffreAffaireEspeceVetoGroup(TUser user, String dtStart, String dtEnd) {
        try {
            List<Tuple> list = getEntityManager()
                    .createNativeQuery("SELECT COALESCE(SUM(m.montantRegle),0) AS MONTANT_ESPECE " + " ,m.organisme "
                            + " FROM mvttransaction m WHERE DATE(m.mvtdate) BETWEEN ?1 AND ?2 AND m.typeReglementId = ?3 AND m.montantRegle >0"
                            + " AND m.checked=TRUE AND  m.typeTransaction=1 AND m.lg_EMPLACEMENT_ID=?4 AND m.pkey"
                            + "  IN (SELECT d.lg_PREENREGISTREMENT_ID FROM t_preenregistrement_detail d ,t_famille f,t_preenregistrement p WHERE d.lg_PREENREGISTREMENT_ID=p.lg_PREENREGISTREMENT_ID AND d.lg_FAMILLE_ID=f.lg_FAMILLE_ID AND f.lg_FAMILLEARTICLE_ID = ?5"
                            + " AND DATE(p.dt_UPDATED) BETWEEN ?1 AND ?2 AND p.lg_TYPE_VENTE_ID <>?6 AND p.str_STATUT='is_Closed' AND p.b_IS_CANCEL=0 AND p.int_PRICE >0 )  GROUP BY m.organisme",
                            Tuple.class)
                    .setParameter(5, DateConverter.VETERINAIRE).setParameter(3, DateConverter.MODE_ESP)
                    .setParameter(4, user.getLgEMPLACEMENTID().getLgEMPLACEMENTID())
                    .setParameter(1, java.sql.Date.valueOf(dtStart), TemporalType.DATE)
                    .setParameter(2, java.sql.Date.valueOf(dtEnd), TemporalType.DATE)
                    .setParameter(6, DateConverter.DEPOT_EXTENSION).getResultList();
            List<DonneesExploitationDTO> exploitations = new ArrayList<>();
            list.forEach(t -> {
                exploitations.add(new DonneesExploitationDTO(t.get(0, BigDecimal.class), t.get(1, String.class), true));
            });
            return exploitations;
        } catch (Exception e) {
            LOG.log(Level.SEVERE, "chiffreAffaireEspeceVetoGroup===>> ", e);
            return Collections.emptyList();
        }
    }

    private DonneesExploitationDTO chiffreAffaireGlobalHT(TUser user, String dtStart, String dtEnd) {
        try {
            List<Tuple> list = getEntityManager().createNativeQuery(
                    "SELECT COALESCE(SUM(m.montant),0) AS MONTANTTTC,COALESCE(SUM(m.montantTva),0) AS MONTANTVA ,COALESCE(SUM(m.montantRemise),0) AS MONTANTREMISE"
                            + " FROM mvttransaction m WHERE DATE(m.mvtdate) BETWEEN ?1 AND ?2"
                            + " AND m.checked=TRUE AND (m.typeTransaction=1 OR m.typeTransaction=0 )  AND m.lg_EMPLACEMENT_ID=?3 AND m.pkey"
                            + "  IN (SELECT d.lg_PREENREGISTREMENT_ID FROM t_preenregistrement_detail d ,t_famille f,t_preenregistrement p WHERE d.lg_PREENREGISTREMENT_ID=p.lg_PREENREGISTREMENT_ID AND d.lg_FAMILLE_ID=f.lg_FAMILLE_ID"
                            + " AND DATE(p.dt_UPDATED) BETWEEN ?1 AND ?2 AND p.lg_TYPE_VENTE_ID <>?4 AND p.str_STATUT='is_Closed' AND p.b_IS_CANCEL=0 AND p.int_PRICE >0 )",
                    Tuple.class).setParameter(3, user.getLgEMPLACEMENTID().getLgEMPLACEMENTID())
                    .setParameter(1, java.sql.Date.valueOf(dtStart), TemporalType.DATE)
                    .setParameter(2, java.sql.Date.valueOf(dtEnd), TemporalType.DATE)
                    .setParameter(4, DateConverter.DEPOT_EXTENSION).getResultList();
            Tuple t = list.get(0);
            return new DonneesExploitationDTO(t.get(0, BigDecimal.class), t.get(1, BigDecimal.class),
                    t.get(2, BigDecimal.class));
        } catch (Exception e) {
            LOG.log(Level.SEVERE, "chiffreAffaireCreditSansVeto===>> ", e);
            return new DonneesExploitationDTO();
        }
    }

}
